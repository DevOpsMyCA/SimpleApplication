var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

var sslOptions = {
  key: fs.readFileSync('/home/ubuntu/certs/privkey.pem'),  // Letâ€™s Encrypt cert
  cert: fs.readFileSync('/home/ubuntu/certs/fullchain.pem')
};

var server = https.createServer(sslOptions, (req, res) => {
  // Redirect IP requests to nip.io
  if (req.headers.host === '54.234.188.62' || req.headers.host === '54.234.188.62:443') {
    res.writeHead(301, { "Location": "https://54.234.188.62.nip.io" + req.url });
    res.end();
  } else {
    app(req, res);  // Serve normally for nip.io
  }
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var httpPort = 80;
var httpServer = http.createServer((req, res) => {
  // Redirect all HTTP requests to HTTPS nip.io
  res.writeHead(301, { "Location": "https://54.234.188.62.nip.io" + req.url });
  res.end();
});
httpServer.listen(httpPort);
